name: Generate Org Stats

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build-org-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        uses: actions/checkout@v3

      - name: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        run: |
          sudo apt update && sudo apt install -y jq curl bc
      
      - name: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å donut chart
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="DiametrEDU"
          
          # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/orgs/$ORG/repos?per_page=100" > repos.json

          # 2. –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
          declare -A languages
          total_bytes=0
          for repo in $(jq -r '.[].name' repos.json); do
            echo "Processing repo: $repo"
            repo_langs_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$ORG/$repo/languages")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
            if [[ -z "$repo_langs_json" || "$repo_langs_json" == "{}" ]]; then
              continue
            fi

            for lang in $(echo "$repo_langs_json" | jq -r 'keys[]'); do
              bytes=$(echo "$repo_langs_json" | jq ".\"$lang\"")
              # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
              # –ö–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ "$lang" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —è–∑—ã–∫–æ–≤ –≤—Ä–æ–¥–µ C++ –∏–ª–∏ C#
              ((languages["$lang"]+=$bytes))
              ((total_bytes+=$bytes))
            done
          done

          if [[ $total_bytes -eq 0 ]]; then
            echo "No language data found. Exiting."
            exit 0
          fi

          # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –æ–±—ä–µ–º—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
          # –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∏ –ª–µ–≥–µ–Ω–¥—É –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º–∏ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏
          sorted_langs=()
          while IFS= read -r line; do
              # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–†–ê–ó–ú–ï–† –ù–ê–ó–í–ê–ù–ò–ï"
              sorted_langs+=("$(echo "$line" | cut -d' ' -f2-)")
          done < <(
              for lang in "${!languages[@]}"; do
                  printf "%d %s\n" "${languages[$lang]}" "$lang"
              done | sort -rn
          )

          # 4. –ì–æ—Ç–æ–≤–∏–º SVG
          # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
          palette=("#e6194b" "#3cb44b" "#ffe119" "#4363d8" "#f58231" "#911eb4" "#46f0f0" "#f032e6" "#bcf60c" "#fabebe" "#008080" "#e6beff" "#9a6324" "#fffac8" "#800000" "#aaffc3" "#808000" "#ffd8b1" "#000075" "#808080")
          declare -A colors
          i=0
          for lang in "${sorted_langs[@]}"; do
            colors["$lang"]=${palette[$((i % ${#palette[@]}))]}
            ((i++))
          done

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—è—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã
          polar_to_cartesian() {
            local cx=$1 cy=$2 r=$3 angle=$4
            local rad=$(echo "$angle * 3.14159265 / 180" | bc -l)
            local x=$(echo "$cx + $r * c($rad)" | bc -l)
            local y=$(echo "$cy + $r * s($rad)" | bc -l)
            echo "$x $y"
          }

          # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å SVG —Ñ–∞–π–ª
          svg_file="org-stats.svg"
          echo "<svg width=\"600\" height=\"300\" viewBox=\"0 0 600 300\" xmlns=\"http://www.w3.org/2000/svg\">" > "$svg_file"
          echo "  <style>text { font: 14px sans-serif; fill: #333; } .org-name { font-weight: bold; font-size: 16px; }</style>" >> "$svg_file"

          # –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä–∞ "–ø–æ–Ω—á–∏–∫–∞"
          start_angle=0
          for lang in "${sorted_langs[@]}"; do
            percent=$(echo "scale=10; ${languages[$lang]} / $total_bytes" | bc)
            angle=$(echo "$percent * 360" | bc -l)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–µ–∫—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –ø—É—Ç—è–º–∏
            if (( $(echo "$angle < 0.1" | bc -l) )); then continue; fi

            end_angle=$(echo "$start_angle + $angle" | bc -l)
            read x1 y1 <<< $(polar_to_cartesian 150 150 100 $start_angle)
            read x2 y2 <<< $(polar_to_cartesian 150 150 100 $end_angle)
            large_arc=$(echo "$angle > 180" | bc)

            echo "  <path d=\"M150,150 L$x1,$y1 A100,100 0 $large_arc,1 $x2,$y2 Z\" fill=\"${colors[$lang]}\"/>" >> "$svg_file"
            start_angle=$end_angle
          done

          # –†–∏—Å—É–µ–º "–¥—ã—Ä–∫—É" –≤ —Ü–µ–Ω—Ç—Ä–µ
          echo "  <circle cx=\"150\" cy=\"150\" r=\"60\" fill=\"white\"/>" >> "$svg_file"
          echo "  <text x=\"150\" y=\"150\" text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"org-name\">$ORG</text>" >> "$svg_file"

          # –†–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É
          legend_y=30
          for lang in "${sorted_langs[@]}"; do
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∏, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ > 0.1%
            percent=$(echo "scale=2; ${languages[$lang]} * 100 / $total_bytes" | bc)
            if (( $(echo "$percent < 0.1" | bc -l) )); then continue; fi
            percent_display=$(printf "%.1f" "$percent")
            
            echo "  <rect x=\"320\" y=\"$legend_y\" width=\"12\" height=\"12\" fill=\"${colors[$lang]}\" />" >> "$svg_file"
            legend_text_y=$((legend_y + 11))
            echo "  <text x=\"340\" y=\"$legend_text_y\">$lang (${percent_display}%%)</text>" >> "$svg_file"
            legend_y=$((legend_y + 20))
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –ª–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
            if [[ $legend_y -gt 280 ]]; then
              echo "  <text x=\"340\" y=\"$legend_text_y\">...</text>" >> "$svg_file"
              break
            fi
          done
          
          echo "</svg>" >> "$svg_file"
          echo "SVG chart generated successfully."

      - name: –ö–æ–º–º–∏—Ç –∏ –ø—É—à SVG
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add org-stats.svg
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
          if ! git diff --staged --quiet; then
            git commit -m "üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è–∑—ã–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
            git push
          else
            echo "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞."
          fi
